/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 177.0, "minX": 0.0, "maxY": 5195.0, "series": [{"data": [[0.0, 295.0], [0.1, 309.0], [0.2, 312.0], [0.3, 314.0], [0.4, 317.0], [0.5, 320.0], [0.6, 323.0], [0.7, 326.0], [0.8, 327.0], [0.9, 329.0], [1.0, 331.0], [1.1, 334.0], [1.2, 336.0], [1.3, 337.0], [1.4, 340.0], [1.5, 341.0], [1.6, 343.0], [1.7, 344.0], [1.8, 345.0], [1.9, 346.0], [2.0, 347.0], [2.1, 348.0], [2.2, 349.0], [2.3, 350.0], [2.4, 351.0], [2.5, 351.0], [2.6, 353.0], [2.7, 354.0], [2.8, 354.0], [2.9, 355.0], [3.0, 357.0], [3.1, 358.0], [3.2, 359.0], [3.3, 360.0], [3.4, 361.0], [3.5, 362.0], [3.6, 363.0], [3.7, 364.0], [3.8, 365.0], [3.9, 366.0], [4.0, 367.0], [4.1, 367.0], [4.2, 368.0], [4.3, 369.0], [4.4, 370.0], [4.5, 371.0], [4.6, 371.0], [4.7, 372.0], [4.8, 374.0], [4.9, 374.0], [5.0, 375.0], [5.1, 376.0], [5.2, 377.0], [5.3, 377.0], [5.4, 378.0], [5.5, 379.0], [5.6, 380.0], [5.7, 380.0], [5.8, 381.0], [5.9, 381.0], [6.0, 382.0], [6.1, 383.0], [6.2, 384.0], [6.3, 385.0], [6.4, 386.0], [6.5, 386.0], [6.6, 387.0], [6.7, 388.0], [6.8, 388.0], [6.9, 389.0], [7.0, 390.0], [7.1, 391.0], [7.2, 391.0], [7.3, 392.0], [7.4, 393.0], [7.5, 394.0], [7.6, 394.0], [7.7, 395.0], [7.8, 396.0], [7.9, 397.0], [8.0, 398.0], [8.1, 398.0], [8.2, 399.0], [8.3, 400.0], [8.4, 401.0], [8.5, 402.0], [8.6, 403.0], [8.7, 403.0], [8.8, 404.0], [8.9, 405.0], [9.0, 406.0], [9.1, 407.0], [9.2, 408.0], [9.3, 408.0], [9.4, 409.0], [9.5, 409.0], [9.6, 410.0], [9.7, 411.0], [9.8, 411.0], [9.9, 412.0], [10.0, 413.0], [10.1, 414.0], [10.2, 415.0], [10.3, 415.0], [10.4, 416.0], [10.5, 417.0], [10.6, 418.0], [10.7, 419.0], [10.8, 419.0], [10.9, 420.0], [11.0, 421.0], [11.1, 422.0], [11.2, 423.0], [11.3, 424.0], [11.4, 424.0], [11.5, 425.0], [11.6, 426.0], [11.7, 427.0], [11.8, 428.0], [11.9, 429.0], [12.0, 429.0], [12.1, 430.0], [12.2, 430.0], [12.3, 431.0], [12.4, 432.0], [12.5, 433.0], [12.6, 434.0], [12.7, 435.0], [12.8, 435.0], [12.9, 436.0], [13.0, 437.0], [13.1, 438.0], [13.2, 439.0], [13.3, 440.0], [13.4, 440.0], [13.5, 441.0], [13.6, 442.0], [13.7, 443.0], [13.8, 443.0], [13.9, 444.0], [14.0, 445.0], [14.1, 446.0], [14.2, 447.0], [14.3, 448.0], [14.4, 448.0], [14.5, 449.0], [14.6, 450.0], [14.7, 450.0], [14.8, 451.0], [14.9, 451.0], [15.0, 452.0], [15.1, 452.0], [15.2, 453.0], [15.3, 454.0], [15.4, 454.0], [15.5, 455.0], [15.6, 456.0], [15.7, 456.0], [15.8, 457.0], [15.9, 458.0], [16.0, 458.0], [16.1, 459.0], [16.2, 460.0], [16.3, 460.0], [16.4, 461.0], [16.5, 461.0], [16.6, 462.0], [16.7, 462.0], [16.8, 463.0], [16.9, 463.0], [17.0, 464.0], [17.1, 465.0], [17.2, 465.0], [17.3, 466.0], [17.4, 466.0], [17.5, 467.0], [17.6, 468.0], [17.7, 468.0], [17.8, 469.0], [17.9, 470.0], [18.0, 470.0], [18.1, 470.0], [18.2, 471.0], [18.3, 472.0], [18.4, 472.0], [18.5, 473.0], [18.6, 473.0], [18.7, 474.0], [18.8, 474.0], [18.9, 475.0], [19.0, 475.0], [19.1, 476.0], [19.2, 476.0], [19.3, 477.0], [19.4, 478.0], [19.5, 478.0], [19.6, 479.0], [19.7, 479.0], [19.8, 480.0], [19.9, 481.0], [20.0, 482.0], [20.1, 482.0], [20.2, 483.0], [20.3, 483.0], [20.4, 483.0], [20.5, 484.0], [20.6, 484.0], [20.7, 485.0], [20.8, 485.0], [20.9, 486.0], [21.0, 486.0], [21.1, 487.0], [21.2, 487.0], [21.3, 488.0], [21.4, 488.0], [21.5, 489.0], [21.6, 489.0], [21.7, 490.0], [21.8, 490.0], [21.9, 491.0], [22.0, 491.0], [22.1, 492.0], [22.2, 492.0], [22.3, 493.0], [22.4, 493.0], [22.5, 494.0], [22.6, 495.0], [22.7, 495.0], [22.8, 496.0], [22.9, 496.0], [23.0, 496.0], [23.1, 497.0], [23.2, 497.0], [23.3, 498.0], [23.4, 499.0], [23.5, 499.0], [23.6, 500.0], [23.7, 500.0], [23.8, 501.0], [23.9, 501.0], [24.0, 502.0], [24.1, 502.0], [24.2, 503.0], [24.3, 503.0], [24.4, 504.0], [24.5, 504.0], [24.6, 504.0], [24.7, 505.0], [24.8, 506.0], [24.9, 506.0], [25.0, 507.0], [25.1, 507.0], [25.2, 508.0], [25.3, 508.0], [25.4, 509.0], [25.5, 509.0], [25.6, 510.0], [25.7, 510.0], [25.8, 510.0], [25.9, 511.0], [26.0, 511.0], [26.1, 512.0], [26.2, 512.0], [26.3, 512.0], [26.4, 513.0], [26.5, 514.0], [26.6, 514.0], [26.7, 514.0], [26.8, 515.0], [26.9, 515.0], [27.0, 516.0], [27.1, 516.0], [27.2, 516.0], [27.3, 517.0], [27.4, 517.0], [27.5, 518.0], [27.6, 518.0], [27.7, 519.0], [27.8, 519.0], [27.9, 520.0], [28.0, 520.0], [28.1, 520.0], [28.2, 521.0], [28.3, 521.0], [28.4, 522.0], [28.5, 522.0], [28.6, 523.0], [28.7, 523.0], [28.8, 524.0], [28.9, 524.0], [29.0, 525.0], [29.1, 525.0], [29.2, 526.0], [29.3, 526.0], [29.4, 526.0], [29.5, 527.0], [29.6, 527.0], [29.7, 528.0], [29.8, 528.0], [29.9, 529.0], [30.0, 529.0], [30.1, 530.0], [30.2, 530.0], [30.3, 530.0], [30.4, 531.0], [30.5, 531.0], [30.6, 532.0], [30.7, 532.0], [30.8, 533.0], [30.9, 533.0], [31.0, 533.0], [31.1, 534.0], [31.2, 534.0], [31.3, 535.0], [31.4, 535.0], [31.5, 536.0], [31.6, 536.0], [31.7, 537.0], [31.8, 537.0], [31.9, 537.0], [32.0, 538.0], [32.1, 538.0], [32.2, 539.0], [32.3, 539.0], [32.4, 540.0], [32.5, 540.0], [32.6, 541.0], [32.7, 541.0], [32.8, 541.0], [32.9, 542.0], [33.0, 542.0], [33.1, 543.0], [33.2, 543.0], [33.3, 544.0], [33.4, 544.0], [33.5, 544.0], [33.6, 544.0], [33.7, 545.0], [33.8, 545.0], [33.9, 546.0], [34.0, 546.0], [34.1, 547.0], [34.2, 547.0], [34.3, 548.0], [34.4, 549.0], [34.5, 549.0], [34.6, 549.0], [34.7, 550.0], [34.8, 550.0], [34.9, 551.0], [35.0, 551.0], [35.1, 551.0], [35.2, 552.0], [35.3, 552.0], [35.4, 553.0], [35.5, 553.0], [35.6, 554.0], [35.7, 554.0], [35.8, 555.0], [35.9, 555.0], [36.0, 555.0], [36.1, 556.0], [36.2, 556.0], [36.3, 557.0], [36.4, 557.0], [36.5, 558.0], [36.6, 558.0], [36.7, 559.0], [36.8, 559.0], [36.9, 559.0], [37.0, 560.0], [37.1, 560.0], [37.2, 561.0], [37.3, 561.0], [37.4, 562.0], [37.5, 562.0], [37.6, 562.0], [37.7, 563.0], [37.8, 564.0], [37.9, 564.0], [38.0, 565.0], [38.1, 565.0], [38.2, 565.0], [38.3, 566.0], [38.4, 566.0], [38.5, 567.0], [38.6, 567.0], [38.7, 568.0], [38.8, 568.0], [38.9, 569.0], [39.0, 569.0], [39.1, 570.0], [39.2, 570.0], [39.3, 571.0], [39.4, 571.0], [39.5, 571.0], [39.6, 572.0], [39.7, 572.0], [39.8, 573.0], [39.9, 573.0], [40.0, 573.0], [40.1, 574.0], [40.2, 574.0], [40.3, 575.0], [40.4, 575.0], [40.5, 575.0], [40.6, 576.0], [40.7, 576.0], [40.8, 576.0], [40.9, 577.0], [41.0, 577.0], [41.1, 578.0], [41.2, 578.0], [41.3, 578.0], [41.4, 579.0], [41.5, 579.0], [41.6, 580.0], [41.7, 580.0], [41.8, 580.0], [41.9, 581.0], [42.0, 581.0], [42.1, 582.0], [42.2, 582.0], [42.3, 582.0], [42.4, 583.0], [42.5, 583.0], [42.6, 584.0], [42.7, 584.0], [42.8, 584.0], [42.9, 585.0], [43.0, 585.0], [43.1, 585.0], [43.2, 586.0], [43.3, 587.0], [43.4, 587.0], [43.5, 587.0], [43.6, 588.0], [43.7, 588.0], [43.8, 589.0], [43.9, 589.0], [44.0, 589.0], [44.1, 590.0], [44.2, 590.0], [44.3, 591.0], [44.4, 591.0], [44.5, 592.0], [44.6, 592.0], [44.7, 593.0], [44.8, 593.0], [44.9, 594.0], [45.0, 594.0], [45.1, 595.0], [45.2, 595.0], [45.3, 596.0], [45.4, 596.0], [45.5, 597.0], [45.6, 597.0], [45.7, 597.0], [45.8, 598.0], [45.9, 598.0], [46.0, 599.0], [46.1, 599.0], [46.2, 599.0], [46.3, 600.0], [46.4, 600.0], [46.5, 601.0], [46.6, 601.0], [46.7, 601.0], [46.8, 602.0], [46.9, 602.0], [47.0, 603.0], [47.1, 603.0], [47.2, 604.0], [47.3, 604.0], [47.4, 604.0], [47.5, 605.0], [47.6, 605.0], [47.7, 605.0], [47.8, 606.0], [47.9, 606.0], [48.0, 607.0], [48.1, 607.0], [48.2, 608.0], [48.3, 608.0], [48.4, 608.0], [48.5, 608.0], [48.6, 609.0], [48.7, 609.0], [48.8, 610.0], [48.9, 610.0], [49.0, 611.0], [49.1, 611.0], [49.2, 612.0], [49.3, 612.0], [49.4, 612.0], [49.5, 613.0], [49.6, 613.0], [49.7, 613.0], [49.8, 614.0], [49.9, 614.0], [50.0, 615.0], [50.1, 615.0], [50.2, 616.0], [50.3, 616.0], [50.4, 617.0], [50.5, 617.0], [50.6, 617.0], [50.7, 618.0], [50.8, 618.0], [50.9, 618.0], [51.0, 619.0], [51.1, 619.0], [51.2, 619.0], [51.3, 620.0], [51.4, 620.0], [51.5, 621.0], [51.6, 621.0], [51.7, 621.0], [51.8, 622.0], [51.9, 622.0], [52.0, 622.0], [52.1, 623.0], [52.2, 623.0], [52.3, 624.0], [52.4, 624.0], [52.5, 625.0], [52.6, 625.0], [52.7, 626.0], [52.8, 626.0], [52.9, 627.0], [53.0, 627.0], [53.1, 628.0], [53.2, 628.0], [53.3, 629.0], [53.4, 629.0], [53.5, 629.0], [53.6, 630.0], [53.7, 630.0], [53.8, 630.0], [53.9, 631.0], [54.0, 631.0], [54.1, 632.0], [54.2, 632.0], [54.3, 633.0], [54.4, 633.0], [54.5, 634.0], [54.6, 634.0], [54.7, 634.0], [54.8, 635.0], [54.9, 635.0], [55.0, 636.0], [55.1, 636.0], [55.2, 637.0], [55.3, 637.0], [55.4, 637.0], [55.5, 638.0], [55.6, 638.0], [55.7, 638.0], [55.8, 639.0], [55.9, 639.0], [56.0, 640.0], [56.1, 640.0], [56.2, 640.0], [56.3, 641.0], [56.4, 641.0], [56.5, 642.0], [56.6, 642.0], [56.7, 643.0], [56.8, 643.0], [56.9, 643.0], [57.0, 644.0], [57.1, 644.0], [57.2, 644.0], [57.3, 645.0], [57.4, 646.0], [57.5, 646.0], [57.6, 647.0], [57.7, 647.0], [57.8, 648.0], [57.9, 648.0], [58.0, 649.0], [58.1, 649.0], [58.2, 650.0], [58.3, 650.0], [58.4, 651.0], [58.5, 651.0], [58.6, 652.0], [58.7, 652.0], [58.8, 652.0], [58.9, 653.0], [59.0, 653.0], [59.1, 654.0], [59.2, 654.0], [59.3, 654.0], [59.4, 655.0], [59.5, 656.0], [59.6, 656.0], [59.7, 656.0], [59.8, 657.0], [59.9, 657.0], [60.0, 657.0], [60.1, 658.0], [60.2, 658.0], [60.3, 658.0], [60.4, 659.0], [60.5, 659.0], [60.6, 660.0], [60.7, 660.0], [60.8, 660.0], [60.9, 661.0], [61.0, 661.0], [61.1, 662.0], [61.2, 662.0], [61.3, 663.0], [61.4, 663.0], [61.5, 664.0], [61.6, 664.0], [61.7, 664.0], [61.8, 665.0], [61.9, 665.0], [62.0, 665.0], [62.1, 666.0], [62.2, 666.0], [62.3, 667.0], [62.4, 667.0], [62.5, 668.0], [62.6, 668.0], [62.7, 668.0], [62.8, 669.0], [62.9, 669.0], [63.0, 670.0], [63.1, 670.0], [63.2, 671.0], [63.3, 671.0], [63.4, 671.0], [63.5, 672.0], [63.6, 672.0], [63.7, 673.0], [63.8, 673.0], [63.9, 674.0], [64.0, 674.0], [64.1, 675.0], [64.2, 675.0], [64.3, 675.0], [64.4, 676.0], [64.5, 676.0], [64.6, 677.0], [64.7, 677.0], [64.8, 678.0], [64.9, 678.0], [65.0, 679.0], [65.1, 679.0], [65.2, 679.0], [65.3, 679.0], [65.4, 680.0], [65.5, 680.0], [65.6, 681.0], [65.7, 681.0], [65.8, 682.0], [65.9, 682.0], [66.0, 682.0], [66.1, 683.0], [66.2, 683.0], [66.3, 683.0], [66.4, 684.0], [66.5, 684.0], [66.6, 685.0], [66.7, 685.0], [66.8, 686.0], [66.9, 686.0], [67.0, 687.0], [67.1, 687.0], [67.2, 688.0], [67.3, 688.0], [67.4, 689.0], [67.5, 689.0], [67.6, 690.0], [67.7, 690.0], [67.8, 691.0], [67.9, 692.0], [68.0, 692.0], [68.1, 693.0], [68.2, 693.0], [68.3, 694.0], [68.4, 694.0], [68.5, 695.0], [68.6, 696.0], [68.7, 696.0], [68.8, 696.0], [68.9, 697.0], [69.0, 697.0], [69.1, 697.0], [69.2, 698.0], [69.3, 698.0], [69.4, 699.0], [69.5, 699.0], [69.6, 700.0], [69.7, 700.0], [69.8, 701.0], [69.9, 702.0], [70.0, 702.0], [70.1, 702.0], [70.2, 703.0], [70.3, 703.0], [70.4, 704.0], [70.5, 704.0], [70.6, 704.0], [70.7, 705.0], [70.8, 705.0], [70.9, 706.0], [71.0, 706.0], [71.1, 707.0], [71.2, 708.0], [71.3, 708.0], [71.4, 709.0], [71.5, 709.0], [71.6, 710.0], [71.7, 710.0], [71.8, 711.0], [71.9, 711.0], [72.0, 712.0], [72.1, 712.0], [72.2, 713.0], [72.3, 714.0], [72.4, 714.0], [72.5, 715.0], [72.6, 715.0], [72.7, 716.0], [72.8, 716.0], [72.9, 717.0], [73.0, 718.0], [73.1, 718.0], [73.2, 719.0], [73.3, 719.0], [73.4, 720.0], [73.5, 720.0], [73.6, 721.0], [73.7, 722.0], [73.8, 722.0], [73.9, 723.0], [74.0, 724.0], [74.1, 724.0], [74.2, 725.0], [74.3, 726.0], [74.4, 726.0], [74.5, 727.0], [74.6, 728.0], [74.7, 728.0], [74.8, 729.0], [74.9, 729.0], [75.0, 730.0], [75.1, 731.0], [75.2, 732.0], [75.3, 732.0], [75.4, 733.0], [75.5, 734.0], [75.6, 735.0], [75.7, 735.0], [75.8, 736.0], [75.9, 736.0], [76.0, 737.0], [76.1, 737.0], [76.2, 738.0], [76.3, 738.0], [76.4, 739.0], [76.5, 740.0], [76.6, 741.0], [76.7, 742.0], [76.8, 742.0], [76.9, 743.0], [77.0, 744.0], [77.1, 745.0], [77.2, 746.0], [77.3, 746.0], [77.4, 747.0], [77.5, 748.0], [77.6, 749.0], [77.7, 750.0], [77.8, 751.0], [77.9, 751.0], [78.0, 752.0], [78.1, 753.0], [78.2, 754.0], [78.3, 755.0], [78.4, 756.0], [78.5, 757.0], [78.6, 758.0], [78.7, 758.0], [78.8, 759.0], [78.9, 760.0], [79.0, 760.0], [79.1, 761.0], [79.2, 762.0], [79.3, 763.0], [79.4, 764.0], [79.5, 765.0], [79.6, 766.0], [79.7, 766.0], [79.8, 767.0], [79.9, 768.0], [80.0, 769.0], [80.1, 770.0], [80.2, 771.0], [80.3, 772.0], [80.4, 772.0], [80.5, 773.0], [80.6, 774.0], [80.7, 775.0], [80.8, 776.0], [80.9, 777.0], [81.0, 777.0], [81.1, 778.0], [81.2, 779.0], [81.3, 780.0], [81.4, 780.0], [81.5, 781.0], [81.6, 782.0], [81.7, 783.0], [81.8, 784.0], [81.9, 784.0], [82.0, 785.0], [82.1, 786.0], [82.2, 787.0], [82.3, 788.0], [82.4, 788.0], [82.5, 789.0], [82.6, 790.0], [82.7, 791.0], [82.8, 792.0], [82.9, 792.0], [83.0, 794.0], [83.1, 795.0], [83.2, 796.0], [83.3, 797.0], [83.4, 798.0], [83.5, 798.0], [83.6, 800.0], [83.7, 800.0], [83.8, 801.0], [83.9, 802.0], [84.0, 803.0], [84.1, 803.0], [84.2, 804.0], [84.3, 805.0], [84.4, 806.0], [84.5, 807.0], [84.6, 808.0], [84.7, 809.0], [84.8, 810.0], [84.9, 810.0], [85.0, 812.0], [85.1, 813.0], [85.2, 814.0], [85.3, 815.0], [85.4, 815.0], [85.5, 816.0], [85.6, 816.0], [85.7, 817.0], [85.8, 818.0], [85.9, 819.0], [86.0, 820.0], [86.1, 821.0], [86.2, 822.0], [86.3, 823.0], [86.4, 825.0], [86.5, 826.0], [86.6, 827.0], [86.7, 828.0], [86.8, 829.0], [86.9, 830.0], [87.0, 832.0], [87.1, 833.0], [87.2, 834.0], [87.3, 835.0], [87.4, 837.0], [87.5, 838.0], [87.6, 839.0], [87.7, 840.0], [87.8, 840.0], [87.9, 842.0], [88.0, 842.0], [88.1, 843.0], [88.2, 845.0], [88.3, 846.0], [88.4, 848.0], [88.5, 849.0], [88.6, 850.0], [88.7, 852.0], [88.8, 853.0], [88.9, 854.0], [89.0, 855.0], [89.1, 856.0], [89.2, 857.0], [89.3, 858.0], [89.4, 861.0], [89.5, 862.0], [89.6, 863.0], [89.7, 865.0], [89.8, 868.0], [89.9, 871.0], [90.0, 872.0], [90.1, 874.0], [90.2, 876.0], [90.3, 877.0], [90.4, 880.0], [90.5, 881.0], [90.6, 883.0], [90.7, 884.0], [90.8, 887.0], [90.9, 888.0], [91.0, 890.0], [91.1, 891.0], [91.2, 893.0], [91.3, 895.0], [91.4, 897.0], [91.5, 899.0], [91.6, 901.0], [91.7, 902.0], [91.8, 903.0], [91.9, 905.0], [92.0, 907.0], [92.1, 909.0], [92.2, 911.0], [92.3, 913.0], [92.4, 916.0], [92.5, 919.0], [92.6, 922.0], [92.7, 924.0], [92.8, 927.0], [92.9, 931.0], [93.0, 934.0], [93.1, 937.0], [93.2, 942.0], [93.3, 946.0], [93.4, 951.0], [93.5, 955.0], [93.6, 958.0], [93.7, 963.0], [93.8, 968.0], [93.9, 975.0], [94.0, 983.0], [94.1, 988.0], [94.2, 991.0], [94.3, 997.0], [94.4, 1005.0], [94.5, 1013.0], [94.6, 1021.0], [94.7, 1034.0], [94.8, 1050.0], [94.9, 1068.0], [95.0, 1096.0], [95.1, 1149.0], [95.2, 1165.0], [95.3, 1197.0], [95.4, 1240.0], [95.5, 1292.0], [95.6, 1321.0], [95.7, 1347.0], [95.8, 1361.0], [95.9, 1371.0], [96.0, 1397.0], [96.1, 1411.0], [96.2, 1426.0], [96.3, 1436.0], [96.4, 1447.0], [96.5, 1464.0], [96.6, 1484.0], [96.7, 1497.0], [96.8, 1509.0], [96.9, 1519.0], [97.0, 1540.0], [97.1, 1557.0], [97.2, 1580.0], [97.3, 1598.0], [97.4, 1610.0], [97.5, 1626.0], [97.6, 1644.0], [97.7, 1658.0], [97.8, 1677.0], [97.9, 1698.0], [98.0, 1720.0], [98.1, 1769.0], [98.2, 1807.0], [98.3, 1848.0], [98.4, 1901.0], [98.5, 1961.0], [98.6, 2013.0], [98.7, 2121.0], [98.8, 2216.0], [98.9, 2330.0], [99.0, 2644.0], [99.1, 2954.0], [99.2, 3755.0], [99.3, 3972.0], [99.4, 4020.0], [99.5, 4057.0], [99.6, 4099.0], [99.7, 4165.0], [99.8, 4237.0], [99.9, 4954.0], [100.0, 5195.0]], "isOverall": false, "label": "addProduct-3", "isController": false}, {"data": [[0.0, 177.0], [0.1, 181.0], [0.2, 182.0], [0.3, 183.0], [0.4, 183.0], [0.5, 184.0], [0.6, 184.0], [0.7, 184.0], [0.8, 184.0], [0.9, 185.0], [1.0, 185.0], [1.1, 185.0], [1.2, 185.0], [1.3, 185.0], [1.4, 185.0], [1.5, 185.0], [1.6, 186.0], [1.7, 186.0], [1.8, 186.0], [1.9, 186.0], [2.0, 186.0], [2.1, 186.0], [2.2, 186.0], [2.3, 186.0], [2.4, 186.0], [2.5, 186.0], [2.6, 186.0], [2.7, 187.0], [2.8, 187.0], [2.9, 187.0], [3.0, 187.0], [3.1, 187.0], [3.2, 187.0], [3.3, 187.0], [3.4, 187.0], [3.5, 187.0], [3.6, 187.0], [3.7, 187.0], [3.8, 187.0], [3.9, 188.0], [4.0, 188.0], [4.1, 188.0], [4.2, 188.0], [4.3, 188.0], [4.4, 188.0], [4.5, 188.0], [4.6, 188.0], [4.7, 188.0], [4.8, 188.0], [4.9, 188.0], [5.0, 188.0], [5.1, 188.0], [5.2, 188.0], [5.3, 189.0], [5.4, 189.0], [5.5, 189.0], [5.6, 189.0], [5.7, 189.0], [5.8, 189.0], [5.9, 189.0], [6.0, 189.0], [6.1, 189.0], [6.2, 189.0], [6.3, 189.0], [6.4, 189.0], [6.5, 189.0], [6.6, 189.0], [6.7, 189.0], [6.8, 190.0], [6.9, 190.0], [7.0, 190.0], [7.1, 190.0], [7.2, 190.0], [7.3, 190.0], [7.4, 190.0], [7.5, 190.0], [7.6, 190.0], [7.7, 190.0], [7.8, 190.0], [7.9, 190.0], [8.0, 190.0], [8.1, 190.0], [8.2, 190.0], [8.3, 190.0], [8.4, 190.0], [8.5, 191.0], [8.6, 191.0], [8.7, 191.0], [8.8, 191.0], [8.9, 191.0], [9.0, 191.0], [9.1, 191.0], [9.2, 191.0], [9.3, 191.0], [9.4, 191.0], [9.5, 191.0], [9.6, 191.0], [9.7, 191.0], [9.8, 191.0], [9.9, 191.0], [10.0, 191.0], [10.1, 192.0], [10.2, 192.0], [10.3, 192.0], [10.4, 192.0], [10.5, 192.0], [10.6, 192.0], [10.7, 192.0], [10.8, 192.0], [10.9, 192.0], [11.0, 192.0], [11.1, 192.0], [11.2, 192.0], [11.3, 192.0], [11.4, 192.0], [11.5, 192.0], [11.6, 192.0], [11.7, 193.0], [11.8, 193.0], [11.9, 193.0], [12.0, 193.0], [12.1, 193.0], [12.2, 193.0], [12.3, 193.0], [12.4, 193.0], [12.5, 193.0], [12.6, 193.0], [12.7, 193.0], [12.8, 193.0], [12.9, 193.0], [13.0, 193.0], [13.1, 193.0], [13.2, 194.0], [13.3, 194.0], [13.4, 194.0], [13.5, 194.0], [13.6, 194.0], [13.7, 194.0], [13.8, 194.0], [13.9, 194.0], [14.0, 194.0], [14.1, 194.0], [14.2, 194.0], [14.3, 194.0], [14.4, 194.0], [14.5, 194.0], [14.6, 194.0], [14.7, 194.0], [14.8, 194.0], [14.9, 195.0], [15.0, 195.0], [15.1, 195.0], [15.2, 195.0], [15.3, 195.0], [15.4, 195.0], [15.5, 195.0], [15.6, 195.0], [15.7, 195.0], [15.8, 195.0], [15.9, 195.0], [16.0, 195.0], [16.1, 195.0], [16.2, 195.0], [16.3, 195.0], [16.4, 195.0], [16.5, 196.0], [16.6, 196.0], [16.7, 196.0], [16.8, 196.0], [16.9, 196.0], [17.0, 196.0], [17.1, 196.0], [17.2, 196.0], [17.3, 196.0], [17.4, 196.0], [17.5, 196.0], [17.6, 196.0], [17.7, 196.0], [17.8, 196.0], [17.9, 196.0], [18.0, 196.0], [18.1, 196.0], [18.2, 196.0], [18.3, 197.0], [18.4, 197.0], [18.5, 197.0], [18.6, 197.0], [18.7, 197.0], [18.8, 197.0], [18.9, 197.0], [19.0, 197.0], [19.1, 197.0], [19.2, 197.0], [19.3, 197.0], [19.4, 197.0], [19.5, 197.0], [19.6, 197.0], [19.7, 197.0], [19.8, 197.0], [19.9, 197.0], [20.0, 197.0], [20.1, 197.0], [20.2, 197.0], [20.3, 197.0], [20.4, 197.0], [20.5, 197.0], [20.6, 198.0], [20.7, 198.0], [20.8, 198.0], [20.9, 198.0], [21.0, 198.0], [21.1, 198.0], [21.2, 198.0], [21.3, 198.0], [21.4, 198.0], [21.5, 198.0], [21.6, 198.0], [21.7, 198.0], [21.8, 198.0], [21.9, 198.0], [22.0, 198.0], [22.1, 198.0], [22.2, 198.0], [22.3, 198.0], [22.4, 198.0], [22.5, 198.0], [22.6, 198.0], [22.7, 198.0], [22.8, 198.0], [22.9, 198.0], [23.0, 198.0], [23.1, 198.0], [23.2, 198.0], [23.3, 198.0], [23.4, 199.0], [23.5, 199.0], [23.6, 199.0], [23.7, 199.0], [23.8, 199.0], [23.9, 199.0], [24.0, 199.0], [24.1, 199.0], [24.2, 199.0], [24.3, 199.0], [24.4, 199.0], [24.5, 199.0], [24.6, 199.0], [24.7, 199.0], [24.8, 199.0], [24.9, 199.0], [25.0, 199.0], [25.1, 199.0], [25.2, 199.0], [25.3, 199.0], [25.4, 199.0], [25.5, 199.0], [25.6, 199.0], [25.7, 199.0], [25.8, 199.0], [25.9, 199.0], [26.0, 199.0], [26.1, 199.0], [26.2, 199.0], [26.3, 199.0], [26.4, 200.0], [26.5, 200.0], [26.6, 200.0], [26.7, 200.0], [26.8, 200.0], [26.9, 200.0], [27.0, 200.0], [27.1, 200.0], [27.2, 200.0], [27.3, 200.0], [27.4, 200.0], [27.5, 200.0], [27.6, 200.0], [27.7, 200.0], [27.8, 200.0], [27.9, 200.0], [28.0, 200.0], [28.1, 200.0], [28.2, 200.0], [28.3, 200.0], [28.4, 200.0], [28.5, 200.0], [28.6, 200.0], [28.7, 200.0], [28.8, 200.0], [28.9, 200.0], [29.0, 200.0], [29.1, 200.0], [29.2, 200.0], [29.3, 200.0], [29.4, 200.0], [29.5, 201.0], [29.6, 201.0], [29.7, 201.0], [29.8, 201.0], [29.9, 201.0], [30.0, 201.0], [30.1, 201.0], [30.2, 201.0], [30.3, 201.0], [30.4, 201.0], [30.5, 201.0], [30.6, 201.0], [30.7, 201.0], [30.8, 201.0], [30.9, 201.0], [31.0, 201.0], [31.1, 201.0], [31.2, 201.0], [31.3, 201.0], [31.4, 201.0], [31.5, 201.0], [31.6, 201.0], [31.7, 201.0], [31.8, 201.0], [31.9, 201.0], [32.0, 201.0], [32.1, 201.0], [32.2, 201.0], [32.3, 201.0], [32.4, 201.0], [32.5, 201.0], [32.6, 201.0], [32.7, 201.0], [32.8, 201.0], [32.9, 202.0], [33.0, 202.0], [33.1, 202.0], [33.2, 202.0], [33.3, 202.0], [33.4, 202.0], [33.5, 202.0], [33.6, 202.0], [33.7, 202.0], [33.8, 202.0], [33.9, 202.0], [34.0, 202.0], [34.1, 202.0], [34.2, 202.0], [34.3, 202.0], [34.4, 202.0], [34.5, 202.0], [34.6, 202.0], [34.7, 202.0], [34.8, 202.0], [34.9, 202.0], [35.0, 202.0], [35.1, 202.0], [35.2, 202.0], [35.3, 202.0], [35.4, 202.0], [35.5, 202.0], [35.6, 202.0], [35.7, 202.0], [35.8, 202.0], [35.9, 202.0], [36.0, 202.0], [36.1, 202.0], [36.2, 202.0], [36.3, 202.0], [36.4, 202.0], [36.5, 202.0], [36.6, 202.0], [36.7, 203.0], [36.8, 203.0], [36.9, 203.0], [37.0, 203.0], [37.1, 203.0], [37.2, 203.0], [37.3, 203.0], [37.4, 203.0], [37.5, 203.0], [37.6, 203.0], [37.7, 203.0], [37.8, 203.0], [37.9, 203.0], [38.0, 203.0], [38.1, 203.0], [38.2, 203.0], [38.3, 203.0], [38.4, 203.0], [38.5, 203.0], [38.6, 203.0], [38.7, 203.0], [38.8, 203.0], [38.9, 203.0], [39.0, 203.0], [39.1, 203.0], [39.2, 203.0], [39.3, 203.0], [39.4, 203.0], [39.5, 203.0], [39.6, 203.0], [39.7, 203.0], [39.8, 203.0], [39.9, 203.0], [40.0, 203.0], [40.1, 203.0], [40.2, 203.0], [40.3, 203.0], [40.4, 204.0], [40.5, 204.0], [40.6, 204.0], [40.7, 204.0], [40.8, 204.0], [40.9, 204.0], [41.0, 204.0], [41.1, 204.0], [41.2, 204.0], [41.3, 204.0], [41.4, 204.0], [41.5, 204.0], [41.6, 204.0], [41.7, 204.0], [41.8, 204.0], [41.9, 204.0], [42.0, 204.0], [42.1, 204.0], [42.2, 204.0], [42.3, 204.0], [42.4, 204.0], [42.5, 204.0], [42.6, 204.0], [42.7, 204.0], [42.8, 204.0], [42.9, 204.0], [43.0, 204.0], [43.1, 204.0], [43.2, 204.0], [43.3, 204.0], [43.4, 204.0], [43.5, 204.0], [43.6, 204.0], [43.7, 205.0], [43.8, 205.0], [43.9, 205.0], [44.0, 205.0], [44.1, 205.0], [44.2, 205.0], [44.3, 205.0], [44.4, 205.0], [44.5, 205.0], [44.6, 205.0], [44.7, 205.0], [44.8, 205.0], [44.9, 205.0], [45.0, 205.0], [45.1, 205.0], [45.2, 205.0], [45.3, 205.0], [45.4, 205.0], [45.5, 205.0], [45.6, 205.0], [45.7, 205.0], [45.8, 205.0], [45.9, 205.0], [46.0, 205.0], [46.1, 205.0], [46.2, 205.0], [46.3, 205.0], [46.4, 205.0], [46.5, 205.0], [46.6, 206.0], [46.7, 206.0], [46.8, 206.0], [46.9, 206.0], [47.0, 206.0], [47.1, 206.0], [47.2, 206.0], [47.3, 206.0], [47.4, 206.0], [47.5, 206.0], [47.6, 206.0], [47.7, 206.0], [47.8, 206.0], [47.9, 206.0], [48.0, 206.0], [48.1, 206.0], [48.2, 206.0], [48.3, 206.0], [48.4, 206.0], [48.5, 206.0], [48.6, 206.0], [48.7, 206.0], [48.8, 206.0], [48.9, 206.0], [49.0, 206.0], [49.1, 206.0], [49.2, 206.0], [49.3, 207.0], [49.4, 207.0], [49.5, 207.0], [49.6, 207.0], [49.7, 207.0], [49.8, 207.0], [49.9, 207.0], [50.0, 207.0], [50.1, 207.0], [50.2, 207.0], [50.3, 207.0], [50.4, 207.0], [50.5, 207.0], [50.6, 207.0], [50.7, 207.0], [50.8, 207.0], [50.9, 207.0], [51.0, 207.0], [51.1, 207.0], [51.2, 207.0], [51.3, 207.0], [51.4, 207.0], [51.5, 207.0], [51.6, 207.0], [51.7, 207.0], [51.8, 207.0], [51.9, 207.0], [52.0, 207.0], [52.1, 208.0], [52.2, 208.0], [52.3, 208.0], [52.4, 208.0], [52.5, 208.0], [52.6, 208.0], [52.7, 208.0], [52.8, 208.0], [52.9, 208.0], [53.0, 208.0], [53.1, 208.0], [53.2, 208.0], [53.3, 208.0], [53.4, 208.0], [53.5, 208.0], [53.6, 208.0], [53.7, 208.0], [53.8, 208.0], [53.9, 208.0], [54.0, 208.0], [54.1, 208.0], [54.2, 208.0], [54.3, 208.0], [54.4, 208.0], [54.5, 209.0], [54.6, 209.0], [54.7, 209.0], [54.8, 209.0], [54.9, 209.0], [55.0, 209.0], [55.1, 209.0], [55.2, 209.0], [55.3, 209.0], [55.4, 209.0], [55.5, 209.0], [55.6, 209.0], [55.7, 209.0], [55.8, 209.0], [55.9, 209.0], [56.0, 209.0], [56.1, 209.0], [56.2, 209.0], [56.3, 209.0], [56.4, 209.0], [56.5, 209.0], [56.6, 209.0], [56.7, 209.0], [56.8, 209.0], [56.9, 210.0], [57.0, 210.0], [57.1, 210.0], [57.2, 210.0], [57.3, 210.0], [57.4, 210.0], [57.5, 210.0], [57.6, 210.0], [57.7, 210.0], [57.8, 210.0], [57.9, 210.0], [58.0, 210.0], [58.1, 210.0], [58.2, 210.0], [58.3, 210.0], [58.4, 210.0], [58.5, 210.0], [58.6, 210.0], [58.7, 210.0], [58.8, 210.0], [58.9, 210.0], [59.0, 210.0], [59.1, 210.0], [59.2, 210.0], [59.3, 210.0], [59.4, 210.0], [59.5, 210.0], [59.6, 211.0], [59.7, 211.0], [59.8, 211.0], [59.9, 211.0], [60.0, 211.0], [60.1, 211.0], [60.2, 211.0], [60.3, 211.0], [60.4, 211.0], [60.5, 211.0], [60.6, 211.0], [60.7, 211.0], [60.8, 211.0], [60.9, 211.0], [61.0, 211.0], [61.1, 211.0], [61.2, 211.0], [61.3, 211.0], [61.4, 211.0], [61.5, 211.0], [61.6, 211.0], [61.7, 211.0], [61.8, 211.0], [61.9, 211.0], [62.0, 212.0], [62.1, 212.0], [62.2, 212.0], [62.3, 212.0], [62.4, 212.0], [62.5, 212.0], [62.6, 212.0], [62.7, 212.0], [62.8, 212.0], [62.9, 212.0], [63.0, 212.0], [63.1, 212.0], [63.2, 212.0], [63.3, 212.0], [63.4, 212.0], [63.5, 212.0], [63.6, 212.0], [63.7, 212.0], [63.8, 212.0], [63.9, 212.0], [64.0, 212.0], [64.1, 212.0], [64.2, 213.0], [64.3, 213.0], [64.4, 213.0], [64.5, 213.0], [64.6, 213.0], [64.7, 213.0], [64.8, 213.0], [64.9, 213.0], [65.0, 213.0], [65.1, 213.0], [65.2, 213.0], [65.3, 213.0], [65.4, 213.0], [65.5, 213.0], [65.6, 213.0], [65.7, 213.0], [65.8, 213.0], [65.9, 213.0], [66.0, 213.0], [66.1, 213.0], [66.2, 213.0], [66.3, 213.0], [66.4, 213.0], [66.5, 214.0], [66.6, 214.0], [66.7, 214.0], [66.8, 214.0], [66.9, 214.0], [67.0, 214.0], [67.1, 214.0], [67.2, 214.0], [67.3, 214.0], [67.4, 214.0], [67.5, 214.0], [67.6, 214.0], [67.7, 214.0], [67.8, 214.0], [67.9, 214.0], [68.0, 214.0], [68.1, 214.0], [68.2, 214.0], [68.3, 214.0], [68.4, 214.0], [68.5, 215.0], [68.6, 215.0], [68.7, 215.0], [68.8, 215.0], [68.9, 215.0], [69.0, 215.0], [69.1, 215.0], [69.2, 215.0], [69.3, 215.0], [69.4, 215.0], [69.5, 215.0], [69.6, 215.0], [69.7, 215.0], [69.8, 215.0], [69.9, 215.0], [70.0, 215.0], [70.1, 215.0], [70.2, 215.0], [70.3, 215.0], [70.4, 215.0], [70.5, 215.0], [70.6, 215.0], [70.7, 215.0], [70.8, 216.0], [70.9, 216.0], [71.0, 216.0], [71.1, 216.0], [71.2, 216.0], [71.3, 216.0], [71.4, 216.0], [71.5, 216.0], [71.6, 216.0], [71.7, 216.0], [71.8, 216.0], [71.9, 216.0], [72.0, 216.0], [72.1, 216.0], [72.2, 216.0], [72.3, 216.0], [72.4, 216.0], [72.5, 217.0], [72.6, 217.0], [72.7, 217.0], [72.8, 217.0], [72.9, 217.0], [73.0, 217.0], [73.1, 217.0], [73.2, 217.0], [73.3, 217.0], [73.4, 217.0], [73.5, 217.0], [73.6, 217.0], [73.7, 217.0], [73.8, 217.0], [73.9, 217.0], [74.0, 217.0], [74.1, 217.0], [74.2, 218.0], [74.3, 218.0], [74.4, 218.0], [74.5, 218.0], [74.6, 218.0], [74.7, 218.0], [74.8, 218.0], [74.9, 218.0], [75.0, 218.0], [75.1, 218.0], [75.2, 218.0], [75.3, 218.0], [75.4, 218.0], [75.5, 218.0], [75.6, 218.0], [75.7, 219.0], [75.8, 219.0], [75.9, 219.0], [76.0, 219.0], [76.1, 219.0], [76.2, 219.0], [76.3, 219.0], [76.4, 219.0], [76.5, 219.0], [76.6, 219.0], [76.7, 219.0], [76.8, 219.0], [76.9, 219.0], [77.0, 220.0], [77.1, 220.0], [77.2, 220.0], [77.3, 220.0], [77.4, 220.0], [77.5, 220.0], [77.6, 220.0], [77.7, 220.0], [77.8, 220.0], [77.9, 220.0], [78.0, 221.0], [78.1, 221.0], [78.2, 221.0], [78.3, 221.0], [78.4, 221.0], [78.5, 221.0], [78.6, 221.0], [78.7, 221.0], [78.8, 221.0], [78.9, 222.0], [79.0, 222.0], [79.1, 222.0], [79.2, 222.0], [79.3, 222.0], [79.4, 222.0], [79.5, 222.0], [79.6, 222.0], [79.7, 223.0], [79.8, 223.0], [79.9, 223.0], [80.0, 223.0], [80.1, 223.0], [80.2, 223.0], [80.3, 224.0], [80.4, 224.0], [80.5, 224.0], [80.6, 224.0], [80.7, 224.0], [80.8, 224.0], [80.9, 224.0], [81.0, 225.0], [81.1, 225.0], [81.2, 225.0], [81.3, 225.0], [81.4, 225.0], [81.5, 225.0], [81.6, 226.0], [81.7, 226.0], [81.8, 226.0], [81.9, 226.0], [82.0, 227.0], [82.1, 227.0], [82.2, 227.0], [82.3, 227.0], [82.4, 228.0], [82.5, 228.0], [82.6, 228.0], [82.7, 229.0], [82.8, 229.0], [82.9, 229.0], [83.0, 230.0], [83.1, 230.0], [83.2, 230.0], [83.3, 231.0], [83.4, 231.0], [83.5, 231.0], [83.6, 232.0], [83.7, 232.0], [83.8, 232.0], [83.9, 233.0], [84.0, 233.0], [84.1, 234.0], [84.2, 234.0], [84.3, 235.0], [84.4, 235.0], [84.5, 236.0], [84.6, 236.0], [84.7, 236.0], [84.8, 237.0], [84.9, 237.0], [85.0, 237.0], [85.1, 238.0], [85.2, 239.0], [85.3, 239.0], [85.4, 240.0], [85.5, 240.0], [85.6, 241.0], [85.7, 241.0], [85.8, 242.0], [85.9, 243.0], [86.0, 243.0], [86.1, 244.0], [86.2, 245.0], [86.3, 245.0], [86.4, 246.0], [86.5, 246.0], [86.6, 247.0], [86.7, 248.0], [86.8, 248.0], [86.9, 249.0], [87.0, 249.0], [87.1, 250.0], [87.2, 250.0], [87.3, 251.0], [87.4, 251.0], [87.5, 252.0], [87.6, 252.0], [87.7, 253.0], [87.8, 254.0], [87.9, 255.0], [88.0, 255.0], [88.1, 256.0], [88.2, 256.0], [88.3, 257.0], [88.4, 258.0], [88.5, 258.0], [88.6, 259.0], [88.7, 260.0], [88.8, 261.0], [88.9, 262.0], [89.0, 263.0], [89.1, 263.0], [89.2, 264.0], [89.3, 264.0], [89.4, 265.0], [89.5, 266.0], [89.6, 267.0], [89.7, 267.0], [89.8, 268.0], [89.9, 269.0], [90.0, 270.0], [90.1, 271.0], [90.2, 271.0], [90.3, 272.0], [90.4, 273.0], [90.5, 274.0], [90.6, 276.0], [90.7, 276.0], [90.8, 277.0], [90.9, 278.0], [91.0, 278.0], [91.1, 279.0], [91.2, 280.0], [91.3, 281.0], [91.4, 282.0], [91.5, 282.0], [91.6, 283.0], [91.7, 284.0], [91.8, 284.0], [91.9, 285.0], [92.0, 286.0], [92.1, 287.0], [92.2, 288.0], [92.3, 289.0], [92.4, 289.0], [92.5, 291.0], [92.6, 292.0], [92.7, 292.0], [92.8, 293.0], [92.9, 294.0], [93.0, 294.0], [93.1, 295.0], [93.2, 296.0], [93.3, 297.0], [93.4, 298.0], [93.5, 298.0], [93.6, 299.0], [93.7, 300.0], [93.8, 300.0], [93.9, 301.0], [94.0, 302.0], [94.1, 303.0], [94.2, 303.0], [94.3, 304.0], [94.4, 305.0], [94.5, 306.0], [94.6, 307.0], [94.7, 307.0], [94.8, 308.0], [94.9, 308.0], [95.0, 309.0], [95.1, 310.0], [95.2, 310.0], [95.3, 311.0], [95.4, 312.0], [95.5, 312.0], [95.6, 313.0], [95.7, 314.0], [95.8, 315.0], [95.9, 315.0], [96.0, 315.0], [96.1, 316.0], [96.2, 317.0], [96.3, 318.0], [96.4, 318.0], [96.5, 319.0], [96.6, 319.0], [96.7, 320.0], [96.8, 320.0], [96.9, 321.0], [97.0, 322.0], [97.1, 322.0], [97.2, 323.0], [97.3, 323.0], [97.4, 324.0], [97.5, 324.0], [97.6, 325.0], [97.7, 326.0], [97.8, 326.0], [97.9, 327.0], [98.0, 328.0], [98.1, 329.0], [98.2, 329.0], [98.3, 330.0], [98.4, 331.0], [98.5, 332.0], [98.6, 333.0], [98.7, 334.0], [98.8, 335.0], [98.9, 336.0], [99.0, 338.0], [99.1, 339.0], [99.2, 341.0], [99.3, 343.0], [99.4, 346.0], [99.5, 349.0], [99.6, 354.0], [99.7, 362.0], [99.8, 394.0], [99.9, 485.0], [100.0, 971.0]], "isOverall": false, "label": "getAllProducts-1", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 9932.0, "series": [{"data": [[600.0, 3452.0], [700.0, 2086.0], [800.0, 1176.0], [900.0, 417.0], [1000.0, 102.0], [1100.0, 42.0], [1200.0, 29.0], [1300.0, 75.0], [1400.0, 106.0], [1500.0, 87.0], [1600.0, 87.0], [1700.0, 41.0], [1800.0, 32.0], [1900.0, 29.0], [2000.0, 14.0], [2100.0, 12.0], [2300.0, 10.0], [2200.0, 15.0], [2500.0, 7.0], [2600.0, 4.0], [2700.0, 7.0], [2800.0, 4.0], [2900.0, 4.0], [3000.0, 2.0], [200.0, 2.0], [3200.0, 2.0], [3300.0, 1.0], [3400.0, 3.0], [3700.0, 7.0], [3800.0, 3.0], [3900.0, 18.0], [4000.0, 38.0], [4100.0, 20.0], [4200.0, 11.0], [4300.0, 5.0], [4400.0, 1.0], [4600.0, 4.0], [300.0, 1216.0], [4900.0, 5.0], [5000.0, 8.0], [5100.0, 4.0], [400.0, 2281.0], [500.0, 3359.0]], "isOverall": false, "label": "addProduct-3", "isController": false}, {"data": [[300.0, 909.0], [600.0, 1.0], [700.0, 4.0], [100.0, 3891.0], [200.0, 9932.0], [400.0, 15.0], [800.0, 2.0], [900.0, 3.0], [500.0, 3.0]], "isOverall": false, "label": "getAllProducts-1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 5100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 8.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1.500ms"], [2, "Requests having \nresponse time > 1.500ms"], [3, "Requests in error"]], "maxY": 18270.0, "series": [{"data": [[0.0, 18270.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 10834.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1.500ms", "isController": false}, {"data": [[2.0, 476.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1.500ms", "isController": false}, {"data": [[3.0, 8.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 47.45517540060639, "minX": 1.72868256E12, "maxY": 100.0, "series": [{"data": [[1.72868256E12, 47.45517540060639], [1.72868274E12, 84.76870515886564], [1.72868262E12, 98.59776168531945], [1.72868268E12, 100.0]], "isOverall": false, "label": "150 Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72868274E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 185.0, "minX": 1.0, "maxY": 1789.9285714285713, "series": [{"data": [[2.0, 463.5], [4.0, 499.5], [5.0, 600.5], [6.0, 406.4], [7.0, 444.25], [8.0, 535.0], [9.0, 546.4], [10.0, 437.0], [11.0, 388.30000000000007], [12.0, 446.9090909090909], [13.0, 518.3333333333334], [14.0, 433.0], [15.0, 369.14285714285717], [16.0, 390.8], [17.0, 437.16666666666674], [18.0, 378.6666666666666], [19.0, 402.99999999999994], [20.0, 356.5], [21.0, 347.0], [22.0, 373.5833333333333], [23.0, 387.4285714285714], [24.0, 340.6153846153846], [25.0, 344.0], [26.0, 388.10344827586204], [27.0, 353.90000000000003], [28.0, 357.16666666666663], [29.0, 374.3333333333333], [30.0, 389.35714285714283], [31.0, 420.3103448275862], [32.0, 377.36842105263156], [33.0, 362.55555555555554], [34.0, 372.61904761904776], [35.0, 358.904761904762], [36.0, 353.94444444444446], [37.0, 385.43749999999994], [38.0, 387.3684210526316], [39.0, 417.94736842105266], [40.0, 440.34285714285716], [41.0, 438.13636363636357], [42.0, 377.8], [43.0, 393.88000000000005], [44.0, 402.36842105263156], [45.0, 387.4], [46.0, 373.89473684210526], [47.0, 385.2978723404256], [48.0, 347.7142857142858], [49.0, 417.81081081081084], [50.0, 587.8888888888888], [51.0, 484.99999999999994], [52.0, 391.30000000000007], [53.0, 409.3750000000001], [54.0, 398.76190476190476], [55.0, 441.70967741935476], [56.0, 489.8918918918919], [57.0, 445.41666666666663], [58.0, 529.4347826086956], [59.0, 400.17391304347825], [60.0, 451.68965517241384], [61.0, 532.6346153846152], [62.0, 378.7058823529411], [63.0, 426.6666666666667], [64.0, 616.6615384615384], [65.0, 421.5428571428571], [66.0, 425.14705882352945], [67.0, 460.35135135135135], [68.0, 429.42105263157896], [69.0, 572.2553191489361], [70.0, 805.2058823529412], [71.0, 713.7368421052632], [72.0, 614.9729729729728], [73.0, 587.0], [74.0, 680.5555555555555], [75.0, 661.7818181818183], [76.0, 1050.793103448276], [77.0, 511.22222222222223], [78.0, 579.8488372093022], [79.0, 504.2272727272728], [80.0, 767.6842105263157], [81.0, 617.5], [82.0, 531.2916666666665], [83.0, 1002.0714285714283], [84.0, 801.0000000000002], [85.0, 552.8888888888888], [86.0, 440.1399999999999], [87.0, 446.1034482758622], [88.0, 467.6], [89.0, 593.8666666666666], [90.0, 663.6857142857143], [91.0, 546.3636363636365], [92.0, 725.0909090909091], [93.0, 1789.9285714285713], [94.0, 621.2727272727274], [95.0, 595.4117647058824], [96.0, 756.1923076923077], [97.0, 834.0882352941176], [98.0, 724.6355140186914], [99.0, 469.1666666666667], [100.0, 710.9046113947628], [1.0, 324.0]], "isOverall": false, "label": "addProduct-3", "isController": false}, {"data": [[93.72740760722962, 683.9253439438879]], "isOverall": false, "label": "addProduct-3-Aggregated", "isController": false}, {"data": [[3.0, 198.0], [4.0, 211.0], [5.0, 232.0], [6.0, 198.33333333333334], [7.0, 201.8], [8.0, 208.0], [9.0, 209.125], [10.0, 199.0], [11.0, 200.5], [12.0, 205.0], [13.0, 210.75], [14.0, 220.25], [15.0, 199.92857142857142], [16.0, 205.81818181818184], [17.0, 211.50000000000003], [18.0, 223.71428571428572], [19.0, 216.3125], [20.0, 205.27272727272728], [21.0, 211.09523809523813], [22.0, 213.72727272727272], [23.0, 203.54545454545453], [24.0, 201.42857142857142], [25.0, 206.38461538461536], [26.0, 208.76470588235293], [27.0, 204.40909090909088], [28.0, 214.81250000000003], [29.0, 211.71428571428572], [30.0, 210.39393939393938], [31.0, 203.20000000000002], [32.0, 212.05], [33.0, 206.58333333333331], [34.0, 206.37931034482753], [35.0, 199.61111111111111], [36.0, 211.8076923076923], [37.0, 223.66666666666666], [38.0, 211.74999999999997], [39.0, 210.7241379310345], [40.0, 215.31578947368425], [41.0, 234.8529411764706], [42.0, 224.38461538461536], [43.0, 223.16666666666669], [44.0, 218.73076923076917], [45.0, 209.42857142857142], [46.0, 214.29787234042556], [47.0, 206.60869565217388], [48.0, 217.89473684210526], [49.0, 220.92105263157902], [50.0, 201.42857142857142], [51.0, 221.33333333333331], [52.0, 224.36111111111114], [53.0, 216.83333333333334], [54.0, 218.75555555555562], [55.0, 240.86842105263156], [56.0, 215.4857142857143], [57.0, 216.49999999999997], [58.0, 204.9375], [59.0, 225.1875], [60.0, 211.29999999999998], [61.0, 205.0681818181818], [62.0, 216.55555555555557], [63.0, 202.92307692307693], [64.0, 212.3421052631579], [65.0, 229.68421052631572], [66.0, 222.27586206896552], [67.0, 207.9464285714286], [68.0, 219.55882352941174], [69.0, 202.29032258064515], [70.0, 222.2307692307692], [71.0, 205.11999999999998], [72.0, 206.03225806451607], [73.0, 216.39285714285714], [74.0, 216.88888888888889], [75.0, 213.83333333333334], [76.0, 246.1866666666666], [77.0, 225.8666666666667], [78.0, 221.92592592592595], [79.0, 228.8985507246377], [80.0, 197.8], [81.0, 207.41176470588235], [83.0, 208.82608695652175], [84.0, 206.65714285714284], [85.0, 237.63157894736844], [86.0, 226.75675675675674], [87.0, 215.36842105263156], [88.0, 214.7857142857143], [89.0, 203.49999999999997], [90.0, 208.18181818181822], [91.0, 215.67741935483872], [92.0, 221.44999999999996], [93.0, 210.94871794871798], [94.0, 218.17105263157887], [95.0, 214.8684210526316], [96.0, 211.14285714285714], [97.0, 208.00000000000006], [98.0, 217.79775280898878], [99.0, 222.55882352941174], [100.0, 218.5436790923835], [1.0, 185.0]], "isOverall": false, "label": "getAllProducts-1", "isController": false}, {"data": [[93.90663956639528, 218.2683604336044]], "isOverall": false, "label": "getAllProducts-1-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 13675.916666666666, "minX": 1.72868256E12, "maxY": 605721.6, "series": [{"data": [[1.72868256E12, 113899.23333333334], [1.72868274E12, 143841.31666666668], [1.72868262E12, 601671.7666666667], [1.72868268E12, 605721.6]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72868256E12, 13675.916666666666], [1.72868274E12, 17366.766666666666], [1.72868262E12, 71845.48333333334], [1.72868268E12, 72002.78333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72868274E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 212.30541012216432, "minX": 1.72868256E12, "maxY": 723.1503117820798, "series": [{"data": [[1.72868256E12, 428.62080825451426], [1.72868274E12, 619.9095816464223], [1.72868262E12, 709.0121530629029], [1.72868268E12, 723.1503117820798]], "isOverall": false, "label": "addProduct-3", "isController": false}, {"data": [[1.72868256E12, 212.30541012216432], [1.72868274E12, 224.75294117647067], [1.72868262E12, 216.50107207652894], [1.72868268E12, 219.60776285620753]], "isOverall": false, "label": "getAllProducts-1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72868274E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 212.30279232111715, "minX": 1.72868256E12, "maxY": 718.8393501805027, "series": [{"data": [[1.72868256E12, 428.6190885640585], [1.72868274E12, 619.9075573549244], [1.72868262E12, 709.0103465265233], [1.72868268E12, 718.8393501805027]], "isOverall": false, "label": "addProduct-3", "isController": false}, {"data": [[1.72868256E12, 212.30279232111715], [1.72868274E12, 224.750865051903], [1.72868262E12, 216.4601682335481], [1.72868268E12, 219.60334097608924]], "isOverall": false, "label": "getAllProducts-1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72868274E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.72868256E12, "maxY": 481.84870364292794, "series": [{"data": [[1.72868256E12, 206.1908856405847], [1.72868274E12, 387.17341430499346], [1.72868262E12, 465.47199868615394], [1.72868268E12, 481.84870364292794]], "isOverall": false, "label": "addProduct-3", "isController": false}, {"data": [[1.72868256E12, 0.0], [1.72868274E12, 0.0], [1.72868262E12, 0.0], [1.72868268E12, 0.6239764166393698]], "isOverall": false, "label": "getAllProducts-1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72868274E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 177.0, "minX": 1.72868256E12, "maxY": 5195.0, "series": [{"data": [[1.72868256E12, 999.0], [1.72868274E12, 4020.0], [1.72868262E12, 4393.0], [1.72868268E12, 5195.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72868256E12, 498.0], [1.72868274E12, 724.0], [1.72868262E12, 780.0], [1.72868268E12, 800.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72868256E12, 679.9000000000001], [1.72868274E12, 1428.4399999999996], [1.72868262E12, 1808.0], [1.72868268E12, 1848.1799999999985]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72868256E12, 594.5], [1.72868274E12, 805.5999999999999], [1.72868262E12, 887.0], [1.72868268E12, 898.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72868256E12, 177.0], [1.72868274E12, 180.0], [1.72868262E12, 178.0], [1.72868268E12, 178.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72868256E12, 314.0], [1.72868274E12, 350.0], [1.72868262E12, 344.0], [1.72868268E12, 346.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72868274E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 185.0, "minX": 1.0, "maxY": 3748.0, "series": [{"data": [[2.0, 314.0], [9.0, 358.0], [21.0, 343.0], [30.0, 340.0], [42.0, 308.0], [55.0, 225.0], [59.0, 316.0], [70.0, 294.5], [72.0, 369.5], [87.0, 308.0], [88.0, 364.0], [95.0, 304.0], [101.0, 313.0], [113.0, 314.0], [118.0, 312.5], [116.0, 412.5], [133.0, 325.0], [129.0, 293.0], [131.0, 323.0], [139.0, 332.0], [143.0, 330.0], [147.0, 321.0], [150.0, 383.0], [155.0, 298.0], [159.0, 357.5], [154.0, 359.0], [153.0, 294.0], [157.0, 228.0], [166.0, 331.5], [167.0, 312.0], [161.0, 624.0], [165.0, 305.5], [160.0, 362.0], [173.0, 338.0], [168.0, 459.0], [171.0, 323.0], [179.0, 313.5], [180.0, 340.5], [176.0, 467.5], [178.0, 399.5], [181.0, 335.0], [182.0, 496.0], [177.0, 233.5], [185.0, 358.0], [191.0, 499.5], [184.0, 729.5], [189.0, 584.0], [188.0, 335.5], [190.0, 285.5], [194.0, 306.0], [193.0, 567.0], [198.0, 304.5], [199.0, 444.5], [196.0, 603.5], [195.0, 322.0], [200.0, 487.5], [203.0, 340.0], [201.0, 283.0], [207.0, 483.0], [204.0, 398.0], [206.0, 562.0], [205.0, 514.0], [214.0, 335.5], [213.0, 482.5], [211.0, 551.0], [212.0, 299.0], [215.0, 368.0], [210.0, 369.0], [208.0, 348.0], [209.0, 307.0], [222.0, 314.0], [218.0, 318.5], [217.0, 380.0], [224.0, 328.0], [226.0, 437.0], [231.0, 338.5], [225.0, 280.5], [228.0, 372.5], [229.0, 307.0], [239.0, 326.5], [232.0, 323.0], [236.0, 316.0], [237.0, 300.0], [233.0, 484.0], [234.0, 303.5], [245.0, 297.0], [242.0, 318.0], [241.0, 358.0], [243.0, 405.5], [244.0, 390.0], [247.0, 385.0], [246.0, 312.0], [248.0, 339.0], [259.0, 322.0], [258.0, 364.0], [1.0, 185.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[177.0, 3748.0], [213.0, 194.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 259.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 729.5, "series": [{"data": [[2.0, 314.0], [9.0, 358.0], [21.0, 343.0], [30.0, 340.0], [42.0, 308.0], [55.0, 225.0], [59.0, 316.0], [70.0, 294.5], [72.0, 369.5], [87.0, 308.0], [88.0, 364.0], [95.0, 304.0], [101.0, 313.0], [113.0, 314.0], [118.0, 312.5], [116.0, 412.5], [133.0, 325.0], [129.0, 293.0], [131.0, 323.0], [139.0, 332.0], [143.0, 330.0], [147.0, 321.0], [150.0, 383.0], [155.0, 298.0], [159.0, 357.5], [154.0, 359.0], [153.0, 294.0], [157.0, 228.0], [166.0, 331.5], [167.0, 312.0], [161.0, 624.0], [165.0, 305.5], [160.0, 362.0], [173.0, 338.0], [168.0, 459.0], [171.0, 323.0], [179.0, 313.5], [180.0, 340.5], [176.0, 467.5], [178.0, 399.5], [181.0, 335.0], [182.0, 496.0], [177.0, 233.5], [185.0, 358.0], [191.0, 499.5], [184.0, 729.5], [189.0, 584.0], [188.0, 335.5], [190.0, 285.5], [194.0, 306.0], [193.0, 567.0], [198.0, 304.5], [199.0, 444.5], [196.0, 603.5], [195.0, 322.0], [200.0, 487.5], [203.0, 340.0], [201.0, 283.0], [207.0, 483.0], [204.0, 398.0], [206.0, 562.0], [205.0, 514.0], [214.0, 335.5], [213.0, 482.5], [211.0, 551.0], [212.0, 299.0], [215.0, 368.0], [210.0, 369.0], [208.0, 348.0], [209.0, 307.0], [222.0, 314.0], [218.0, 318.5], [217.0, 380.0], [224.0, 328.0], [226.0, 437.0], [231.0, 338.5], [225.0, 280.5], [228.0, 372.5], [229.0, 307.0], [239.0, 326.5], [232.0, 323.0], [236.0, 316.0], [237.0, 300.0], [233.0, 484.0], [234.0, 303.5], [245.0, 297.0], [242.0, 318.0], [241.0, 358.0], [243.0, 405.5], [244.0, 390.0], [247.0, 385.0], [246.0, 312.0], [248.0, 339.0], [259.0, 322.0], [258.0, 364.0], [1.0, 185.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[177.0, 0.0], [213.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 259.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 39.666666666666664, "minX": 1.72868256E12, "maxY": 203.1, "series": [{"data": [[1.72868256E12, 39.666666666666664], [1.72868274E12, 47.35], [1.72868262E12, 203.01666666666668], [1.72868268E12, 203.1]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72868274E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72868256E12, "maxY": 203.21666666666667, "series": [{"data": [[1.72868256E12, 38.483333333333334], [1.72868274E12, 48.78333333333333], [1.72868262E12, 202.51666666666668], [1.72868268E12, 203.21666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.72868262E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.72868268E12, 0.11666666666666667]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72868274E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72868256E12, "maxY": 101.76666666666667, "series": [{"data": [[1.72868256E12, 19.1], [1.72868274E12, 24.083333333333332], [1.72868262E12, 101.03333333333333], [1.72868268E12, 101.76666666666667]], "isOverall": false, "label": "getAllProducts-1-success", "isController": false}, {"data": [[1.72868256E12, 19.383333333333333], [1.72868274E12, 24.7], [1.72868262E12, 101.48333333333333], [1.72868268E12, 101.45]], "isOverall": false, "label": "addProduct-3-success", "isController": false}, {"data": [[1.72868262E12, 0.016666666666666666]], "isOverall": false, "label": "getAllProducts-1-failure", "isController": false}, {"data": [[1.72868268E12, 0.11666666666666667]], "isOverall": false, "label": "addProduct-3-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72868274E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72868256E12, "maxY": 203.21666666666667, "series": [{"data": [[1.72868256E12, 38.483333333333334], [1.72868274E12, 48.78333333333333], [1.72868262E12, 202.51666666666668], [1.72868268E12, 203.21666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.72868262E12, 0.016666666666666666], [1.72868268E12, 0.11666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72868274E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

