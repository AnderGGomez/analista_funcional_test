{
	"info": {
		"_postman_id": "f7d5c014-a139-42d0-abf1-78a0bb816204",
		"name": "technicalTest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37153025",
		"_collection_link": "https://restless-water-359122.postman.co/workspace/PruebaTecnica~46ee7a64-23b2-4d5d-b773-e45cbec913e5/collection/37153025-f7d5c014-a139-42d0-abf1-78a0bb816204?action=share&source=collection_link&creator=37153025"
	},
	"item": [
		{
			"name": "1 - getProductByCategory",
			"item": [
				{
					"name": "getProductByCategory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verificar el status code 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verificar un tiempo de respuesta menor a 500ms\", function (){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verificar la categoria del producto\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    jsonData.forEach(product =>{\r",
									"        pm.expect(product.category).to.eql('electronics');\r",
									"    })\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://fakestoreapi.com/products/category/electronics",
							"protocol": "https",
							"host": [
								"fakestoreapi",
								"com"
							],
							"path": [
								"products",
								"category",
								"electronics"
							]
						}
					},
					"response": []
				}
			],
			"description": "**Título del Caso de Prueba**: Verificar la respuesta de la API para la categoría de productos electrónicos\n\n**Descripción**: Este caso de prueba valida que el endpoint responda correctamente al realizar una solicitud GET a la categoría de productos electrónicos, asegurando que se reciba un código de estado 200 y que todos los productos pertenezcan a la categoría correcta.\n\n**Endpoint**: `https://fakestoreapi.com/products/category/electronics`\n\n**Método HTTP**: GET\n\n**Resultados Esperados**:\n\n- Código de estado: 200\n    \n- Respuesta esperada: Un array de objetos que representan productos, donde cada objeto debe tener un campo `category` con el valor `'electronics'`."
		},
		{
			"name": "2 - getProductDetails",
			"item": [
				{
					"name": "getProductDetails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"title\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"price\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"description\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"category\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"image\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"rating\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"rate\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"count\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"rate\",\r",
									"        \"count\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"title\",\r",
									"    \"price\",\r",
									"    \"description\",\r",
									"    \"category\",\r",
									"    \"image\",\r",
									"    \"rating\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Verificar el esquema de la respuesta\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verificar que se consulto el producto correcto.\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var title = pm.collectionVariables.get(\"title\");\r",
									"    var price = pm.collectionVariables.get(\"price\");\r",
									"\r",
									"    pm.expect(jsonData.id).to.be.eql(2);\r",
									"    pm.expect(jsonData.title).to.be.eql(title);\r",
									"    pm.expect(jsonData.price).to.be.eql(price);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"title\", \"Mens Casual Premium Slim Fit T-Shirts \");\r",
									"\r",
									"pm.collectionVariables.set(\"price\", 22.3);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://fakestoreapi.com/products/2",
							"protocol": "https",
							"host": [
								"fakestoreapi",
								"com"
							],
							"path": [
								"products",
								"2"
							]
						}
					},
					"response": []
				}
			],
			"description": "**Caso de Prueba**: Verificar la respuesta de la API al consultar un producto específico\n\n**Descripción**: Este caso de prueba valida que el endpoint responda correctamente al realizar una solicitud GET para consultar el producto con ID 2, asegurando que se reciba un código de estado 200 y que la respuesta cumpla con el esquema JSON definido.\n\n**Endpoint**: `https://fakestoreapi.com/products/2`\n\n**Método HTTP**: GET\n\n**Parámetros de entrada**:\n\n- **Path Params**:\n    \n    - **ID**: 2 (ID del producto a consultar)\n        \n\n**Resultados Esperados**:\n\n- _(Nota: Los valores en la respuesta esperada pueden variar según el producto en la API.)_\n    \n- Código de estado: 200\n    \n- {    \"id\": 2,    \"title\": \"Mens Casual Premium Slim Fit T-Shirts \",    \"price\": 22.3,    \"description\": \"Slim-fitting style, contrast raglan long sleeve, three-button henley placket, light weight & soft fabric for breathable and comfortable wearing. And Solid stitched shirts with round neck made for durability and a great fit for casual fashion wear and diehard baseball fans. The Henley style round neckline includes a three-button placket.\",    \"category\": \"men's clothing\",    \"image\": \"https://fakestoreapi.com/img/71-3HjGNDUL._AC_SY879._SX._UX._SY._UY_.jpg\",    \"rating\": {        \"rate\": 4.1,        \"count\": 259    }}"
		},
		{
			"name": "3 - addNewProduct",
			"item": [
				{
					"name": "addNewProduct",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var name = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
									"var description = pm.variables.replaceIn(\"{{$randomLoremSentence}}\");\r",
									"var price = pm.variables.replaceIn(\"{{$randomPrice}}\");\r",
									"\r",
									"pm.collectionVariables.set(\"name\", name);\r",
									"pm.collectionVariables.set(\"description\", description);\r",
									"pm.collectionVariables.set(\"price\", price);\r",
									"pm.collectionVariables.set(\"image\", \"https: //i.pravatar.cc\");\r",
									"pm.collectionVariables.set(\"category\", \"electronic\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verificar el status code 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header es application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verificar las llave del objeto producto\", function () {\r",
									"     var jsonData = pm.response.json();\r",
									"\r",
									"     pm.expect(jsonData).to.have.all.keys('id', 'title', 'price', 'description','image','category');\r",
									"});\r",
									"\r",
									"pm.test(\"Verificar los valores del producto creado\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var name = pm.collectionVariables.get(\"name\");\r",
									"    var description = pm.collectionVariables.get(\"description\");\r",
									"    var price = pm.collectionVariables.get(\"price\");\r",
									"    var image = pm.collectionVariables.get(\"image\");\r",
									"    var category = pm.collectionVariables.get(\"category\");\r",
									"\r",
									"    pm.expect(jsonData.title).to.eql(name);\r",
									"    pm.expect(jsonData.description).to.eql(description);\r",
									"    pm.expect(jsonData.price.toString()).to.eql(price);\r",
									"    pm.expect(jsonData.image).to.eql(image);\r",
									"    pm.expect(jsonData.category).to.eql(category);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{name}}\",\r\n    \"price\": {{price}},\r\n    \"description\": \"{{description}}\",\r\n    \"image\": \"{{image}}\",\r\n    \"category\": \"{{category}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://fakestoreapi.com/products",
							"protocol": "https",
							"host": [
								"fakestoreapi",
								"com"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				}
			],
			"description": "**Caso de Prueba**: Verificar respuesta exitosa al crear un nuevo producto\n\n**Descripción**: Este caso de prueba valida que el endpoint responda correctamente al enviar una solicitud POST para crear un nuevo producto, asegurando que se reciba un código de estado 200 y que la respuesta contenga los datos del producto creado con las propiedades correctas.\n\n**Endpoint**: `https://fakestoreapi.com/products`\n\n**Método HTTP**: POST\n\n**Body**:\n\n- `{ \"title\": \"name\", \"price\": price, \"description\": \"description\", \"image\": \"image\", \"category\": \"category\" }`\n    \n\n**Resultados Esperados**:\n\n- Código de estado: 200\n    \n- Respuesta esperada:\n    \n    `{ \"id\": \"nuevo_id\", \"title\": \"name\", \"price\": price, \"description\": \"description\", \"image\": \"image\", \"category\": \"category\" }`"
		},
		{
			"name": "4 - updateProduct",
			"item": [
				{
					"name": "addNewProduct",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var name = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
									"var description = pm.variables.replaceIn(\"{{$randomLoremSentence}}\");\r",
									"var price = pm.variables.replaceIn(\"{{$randomPrice}}\");\r",
									"\r",
									"pm.collectionVariables.set(\"name\", name);\r",
									"pm.collectionVariables.set(\"description\", description);\r",
									"pm.collectionVariables.set(\"price\", price);\r",
									"pm.collectionVariables.set(\"image\", \"https: //i.pravatar.cc\");\r",
									"pm.collectionVariables.set(\"category\", \"electronic\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"newProductId\", jsonData.id);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{name}}\",\r\n    \"price\": {{price}},\r\n    \"description\": \"{{description}}\",\r\n    \"image\": \"{{image}}\",\r\n    \"category\": \"{{category}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://fakestoreapi.com/products",
							"protocol": "https",
							"host": [
								"fakestoreapi",
								"com"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateProduct",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"imageUpdate\", \"https://i.pravatar.cc/?img=3\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verificar la actualización de la imagen\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var image = pm.collectionVariables.get(\"image\");\r",
									"    var imageUpdate = pm.collectionVariables.get(\"imageUpdate\");\r",
									"\r",
									"    pm.expect(jsonData.image).to.not.eql(image);\r",
									"    pm.expect(jsonData.image).to.eql(imageUpdate);\r",
									"});\r",
									"\r",
									"pm.test(\"Verificar el id del producto actualizado\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    var idProduct= pm.collectionVariables.get(\"newProductId\");\r",
									"\r",
									"    pm.expect(jsonData.id).to.be.eql(idProduct);\r",
									"});\r",
									"\r",
									"pm.test(\"Validar tipos de datos\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.be.a('number');\r",
									"    pm.expect(jsonData.title).to.be.a('string');\r",
									"    pm.expect(jsonData.price).to.be.a('number');\r",
									"    pm.expect(jsonData.description).to.be.a('string');\r",
									"    pm.expect(jsonData.image).to.be.a('string');\r",
									"    pm.expect(jsonData.category).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{name}}\",\r\n    \"price\": {{price}},\r\n    \"description\": \"{{description}}\",\r\n    \"image\": \"{{imageUpdate}}\",\r\n    \"category\": \"{{category}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://fakestoreapi.com/products/{{newProductId}}",
							"protocol": "https",
							"host": [
								"fakestoreapi",
								"com"
							],
							"path": [
								"products",
								"{{newProductId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "**Caso de Prueba**: Verificar respuesta exitosa al actualizar un producto\n\n**Descripción**: Este caso de prueba valida que el endpoint responda correctamente al enviar una solicitud PUT para actualizar un producto existente, asegurando que se reciban los datos actualizados y se verifique el tipo de datos correcto.\n\n**Endpoint**: `https://fakestoreapi.com/products/{{id}}`\n\n**Método HTTP**: PUT\n\n**Parámetros de entrada**:\n\n- **Body**:\n    \n    `{ \"title\": \"name\", \"price\": price, \"description\": \"description\", \"image\": \"image\", \"category\": \"category\" }`\n    \n- **Resultados Esperados**:\n    \n    - Código de estado: 200\n        \n    - Respuesta esperada:\n        \n        `{ \"id\": {{id}}, \"title\": \"name\", \"price\": price, \"description\": \"description\", \"image\": \"image\", \"category\": \"category\" }`\n        \n\n**Pasos**:\n\n1. Ejecutar la request **addNewProduct**, para crear un nuevo producto y obtener su ID.\n    \n2. Ejecute el endpoint de actualización **updateProduct**"
		},
		{
			"name": "5 - DeleteProducts",
			"item": [
				{
					"name": "getAllProducts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var jsonData = pm.response.json();\r",
									"let products = [];\r",
									"\r",
									"jsonData.forEach(product => {\r",
									"    if (product.price <= 100 && product.category === \"electronics\" ){\r",
									"        products.push(product.id);\r",
									"    }\r",
									"})\r",
									"\r",
									"pm.test('Verificar la lista de productos no este vacia',function(){\r",
									"    pm.expect(products).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"products.forEach(productId => {\r",
									"    pm.sendRequest({\r",
									"        url: `https://fakestoreapi.com/products/${productId}`,\r",
									"        method: 'DELETE'\r",
									"    }, function (err, res) {\r",
									"        if (err) {\r",
									"            console.error('Error al eliminar el producto:', err);\r",
									"        }\r",
									"        pm.test(\"Verificar eliminacion del producto correcto\", function () {\r",
									"            var jsonData = res.json();\r",
									"            pm.expect(jsonData.id).to.be.eql(productId);\r",
									"        });\r",
									"        \r",
									"        pm.test(\"Verificar condiciones de eliminación del producto\", function () {\r",
									"            var jsonData = res.json();\r",
									"            pm.expect(jsonData.price).to.be.below(100);\r",
									"            pm.expect(jsonData.category).to.eql(\"electronics\");\r",
									"        });\r",
									"\r",
									"        \r",
									"    });\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://fakestoreapi.com/products",
							"protocol": "https",
							"host": [
								"fakestoreapi",
								"com"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				}
			],
			"description": "**Explicación del Uso de** **`pm.sendRequest`** **en el Caso de Prueba**\n\nEn la obtención de productos, se utiliza el endpoint `GET https://fakestoreapi.com/products` para recuperar todos los productos de la API. Este primer paso es crucial porque permite obtener los productos que cumplen con ciertos criterios, en este caso, aquellos que tienen un precio inferior o igual a 100 y pertenecen a la categoría \"electronics\".\n\nDespués de obtener la lista de productos, se realiza un análisis para filtrar aquellos que cumplen con las condiciones especificadas. La función `pm.sendRequest` se emplea para iterar sobre cada uno de los identificadores de productos (`productId`) que se han recopilado y, en base a estos, se envía una solicitud `DELETE` a la API para eliminar cada producto\n\n**Título del Caso de Prueba**: Verificar eliminación de productos\n\n**Descripción**: Este caso de prueba valida que se eliminen correctamente los productos de la categoría \"electronics\" con un precio inferior a 100, asegurando que la respuesta de eliminación contenga el producto correcto.\n\n**Endpoint**: `https://fakestoreapi.com/products/${productId}`\n\n**Método HTTP**: DELETE\n\n**Headers**: No se requieren headers específicos para esta solicitud.\n\n**Parámetros de entrada**:\n\n- **Path Parameter**:\n    \n    - `productId`: ID del producto a eliminar, que se obtiene de la lista de productos de la prueba anterior\n        \n\n**Resultados Esperados**:\n\n- Código de estado: 200 (o el que la API defina para la eliminación exitosa)\n    \n- Respuesta esperada: Un objeto que contiene al menos el campo `id` del producto eliminado."
		}
	],
	"variable": [
		{
			"key": "category",
			"value": ""
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "description",
			"value": ""
		},
		{
			"key": "price",
			"value": ""
		},
		{
			"key": "image",
			"value": ""
		},
		{
			"key": "imageUpdate",
			"value": ""
		},
		{
			"key": "productId",
			"value": ""
		},
		{
			"key": "newProductId",
			"value": ""
		},
		{
			"key": "title",
			"value": ""
		}
	]
}